import { ConsumerSchema } from './consumer.model';
import { DeliveryPreferencesSchema } from './delivery.model';
import {
  CustomAttributesSchema,
  isoDateRegex,
  LineItemArticleSchema,
} from './shared.model';
import { z } from 'zod';

export const OrderLineItemSchema = z.object({
  article: LineItemArticleSchema,
  quantity: z.number().min(1),
  scannableCodes: z
    .string()
    .array()
    .optional(),
  shopPrice: z.number(),
  customAttributes: CustomAttributesSchema.optional(),
  id: z.string(), // It is generated during creation automatically by the API and suits as the primary identifier of the described line.
});
export type OrderLineItem = z.TypeOf<typeof OrderLineItemSchema>;

export const OrderStatus = z.enum(['OPEN', 'CANCELLED', 'LOCKED']);

export const OrderLineItemArraySchema = OrderLineItemSchema.array().nonempty();

export const OrderForCreationSchema = z.object({
  orderDate: z.string().regex(isoDateRegex),
  consumer: ConsumerSchema,
  tenantOrderId: z.string().optional(),
  status: OrderStatus.optional(),
  orderLineItems: OrderLineItemArraySchema, // min: 1
  deliveryPreferences: DeliveryPreferencesSchema.optional(),
  customAttributes: CustomAttributesSchema.optional(),
});

export const OrderSchema = OrderForCreationSchema.extend({
  status: OrderStatus,
  version: z.number().nonnegative(),
  created: z
    .string()
    .regex(isoDateRegex)
    .optional(), // This value is generated by the service.
  lastModified: z
    .string()
    .regex(isoDateRegex)
    .optional(), // This value is generated by the service.
  id: z.string(), // is generated during creation automatically and suits as the primary identifier of the described entity.
  anonymized: z.boolean().optional(),
});

export type OrderForCreation = z.TypeOf<typeof OrderForCreationSchema>;
export type Order = z.TypeOf<typeof OrderSchema>;
